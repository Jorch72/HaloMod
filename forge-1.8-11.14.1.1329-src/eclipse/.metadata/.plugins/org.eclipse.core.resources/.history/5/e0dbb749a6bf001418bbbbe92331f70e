package halocraft;

import java.util.Collection;
import java.util.Iterator;

import org.lwjgl.opengl.GL11;

import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.Gui;
import net.minecraft.client.gui.ScaledResolution;
import net.minecraft.client.renderer.Tessellator;
import net.minecraft.client.renderer.WorldRenderer;
import net.minecraft.item.ItemStack;
import net.minecraft.potion.Potion;
import net.minecraft.potion.PotionEffect;
import net.minecraft.util.ResourceLocation;
import net.minecraftforge.client.event.RenderGameOverlayEvent;
import net.minecraftforge.client.event.RenderGameOverlayEvent.ElementType;
import net.minecraftforge.fml.common.eventhandler.EventPriority;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import net.minecraftforge.fml.common.gameevent.TickEvent.RenderTickEvent;

public class HaloEventHandler extends Gui{
	private Minecraft mc;
	ResourceLocation res = new ResourceLocation("halocraft:textures/gui/HaloOverlay.png");
	 public HaloEventHandler(Minecraft mc){
	    super();
	    // We need this to invoke the render engine.
	    this.mc = mc;
	  }
	  private static final int BUFF_ICON_SIZE = 18;
	  private static final int BUFF_ICON_SPACING = BUFF_ICON_SIZE + 2; // 2 pixels between buff icons
	  private static final int BUFF_ICON_BASE_U_OFFSET = 0;
	  private static final int BUFF_ICON_BASE_V_OFFSET = 198;
	  private static final int BUFF_ICONS_PER_ROW = 8;
	  @SubscribeEvent(priority = EventPriority.NORMAL)
	  public void onRenderGameOverlay(RenderGameOverlayEvent event)
	  {
	    if(event.isCancelable() || event.type != ElementType.EXPERIENCE)
	    {      
	      return;
	    }
	    ItemStack helmet = Minecraft.getMinecraft().thePlayer.inventory.armorItemInSlot(3);
	    if (helmet.getItem() == halocraft.Main.SpartanHelmet){
	    // Starting position for the buff bar - 2 pixels from the top left corner.
	    int xPos = 0;
	    int yPos = 0;
	    this.drawTexturedModalRect(
	              xPos, yPos, 
	              BUFF_ICON_BASE_U_OFFSET + iconIndex % BUFF_ICONS_PER_ROW * BUFF_ICON_SIZE, BUFF_ICON_BASE_V_OFFSET + iconIndex / BUFF_ICONS_PER_ROW * BUFF_ICON_SIZE,
	              BUFF_ICON_SIZE, BUFF_ICON_SIZE);
	  }
     }
}
